{
  "name": "RAG Farming Agent",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "9d2ed79b-8038-43a3-bfcf-b81bae502d50",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -740,
        400
      ],
      "credentials": {
        "openAiApi": {
          "id": "VNjQcg0XPXM42sfX",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.data || $json.text || $json.concatenated_data }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "=file_id",
                "value": "={{ $('Download Text').item.json.metadata.file_id }}"
              }
            ]
          }
        }
      },
      "id": "1351ac7e-1a71-4488-8a35-7d4792c8191d",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        -780,
        1180
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "f731622c-f9dd-4281-9a25-710ec07c2719",
      "name": "Embeddings OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        -1000,
        1240
      ],
      "credentials": {
        "openAiApi": {
          "id": "VNjQcg0XPXM42sfX",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "name": "user_documents",
        "description": "Contains all the user's documents that you can check for context to answer user questions."
      },
      "id": "cefa3cb1-99b2-45eb-b081-1ab25e501a4a",
      "name": "Retrieve Documents",
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        -1120,
        300
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "e15f5126-eae1-47c7-919f-a448d495222f",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        -940,
        700
      ],
      "credentials": {
        "openAiApi": {
          "id": "VNjQcg0XPXM42sfX",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "id": "18e93768-d0df-4c23-b614-2f2f88fa8a2c",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1,
      "position": [
        -1960,
        520
      ],
      "notesInFlow": false,
      "credentials": {
        "postgres": {
          "id": "eL0K9QhsNChjrYto",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "documents",
        "filterType": "string",
        "filterString": "=metadata->>file_id=like.*{{ $json.file_id }}*"
      },
      "id": "ad22ac0d-a5b8-4cbe-b0f9-8d304661c2f2",
      "name": "Delete Old Doc Rows",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2000,
        940
      ],
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "DL49X3llf4q0tNtg",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "X-n8n-Signature",
                "value": "EvtIS^EBVISeie6svB@6ev"
              }
            ]
          }
        }
      },
      "id": "5512c16e-1f97-4558-9f8c-bd99f91c72ee",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        0,
        60
      ]
    },
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "id": "8e61604b-f1a8-45a6-9157-bf7c83788928",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -2880,
        180
      ],
      "webhookId": "15e4d662-3f98-48d0-9f50-68838769ecac"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "invoke-test-agent",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "12ed0b6b-5d9f-4059-a2d6-a2e231a7fcbd",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2880,
        480
      ],
      "webhookId": "9ba11544-5c4e-4f91-818a-08a4ecb596c5",
      "credentials": {
        "httpHeaderAuth": {
          "id": "jnF0CRExSJQqMma7",
          "name": "Header Auth account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {},
      "id": "3f62db2b-5f0b-40b8-931f-10ec0f2e7afb",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        -520,
        1420
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "id": "93479733-6786-4efc-a0b7-3fc9ff402cce",
      "name": "Insert into Supabase Vectorstore",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        -1200,
        940
      ],
      "credentials": {
        "supabaseApi": {
          "id": "DL49X3llf4q0tNtg",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableName": {
          "__rl": true,
          "value": "sensor_data",
          "mode": "list",
          "cachedResultName": "sensor_data"
        },
        "options": {}
      },
      "id": "2363d610-659b-4adc-9696-99a0c1973de7",
      "name": "Supabase Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        -980,
        540
      ],
      "credentials": {
        "supabaseApi": {
          "id": "DL49X3llf4q0tNtg",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1460,
        940
      ],
      "id": "163a092f-064d-4253-9999-8c18a6a587f1",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set Doc ID').item.json.file_id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "id": "423f20a1-a805-413a-b2c5-cb341f44c4ae",
      "name": "Download Text",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1760,
        940
      ],
      "executeOnce": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "gVUOLYf0tun4Nq2E",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "query",
              "value": "={{ {\n\"type\": \"human\",\n\"content\": $json.body.query,\n} }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "user_id",
              "value": "={{ $json.body.user_id }}",
              "type": "string"
            },
            {
              "id": "ea6f016e-2904-4701-8d8d-acabc83c705a",
              "name": "request_id",
              "value": "={{ $json.body.request_id }}",
              "type": "string"
            },
            {
              "id": "aca1a7d0-4b20-4b45-abb5-2c2d16c7e5f6",
              "name": "session_id",
              "value": "={{ $json.body.session_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "cb1ec231-ec72-49a7-a957-3597878bb151",
      "name": "Prep Input Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2660,
        480
      ]
    },
    {
      "parameters": {
        "tableId": "messages",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $json.session_id }}"
            },
            {
              "fieldId": "message",
              "fieldValue": "={{ $json.query }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2420,
        480
      ],
      "id": "06f172e0-3e73-4f99-a2d6-02675b4473e7",
      "name": "Add User Message to DB",
      "credentials": {
        "supabaseApi": {
          "id": "DL49X3llf4q0tNtg",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "messages",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $('Prep Input Fields').item.json.session_id }}"
            },
            {
              "fieldId": "message",
              "fieldValue": "={{ {\n\"type\": \"ai\",\n\"content\": $json.output,\n\"data\": $json.data,\n\"additional_kwargs\": {},\n\"response_metadata\": {}\n} }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -580,
        60
      ],
      "id": "9c1da616-8960-4860-9265-3da682629a94",
      "name": "Add AI Message to DB",
      "credentials": {
        "supabaseApi": {
          "id": "DL49X3llf4q0tNtg",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b9b7b266-3a46-4f72-96b7-90fce238f280",
              "name": "success",
              "value": "=true",
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -280,
        60
      ],
      "id": "c804a8d5-3679-4742-8e68-92b27125142d",
      "name": "Prep Output Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $json.mimeType }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "ef84734a-db9d-4d5d-b812-90e90a294031",
      "name": "Set Doc ID",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2240,
        940
      ]
    },
    {
      "parameters": {
        "name": "Generate_Chart",
        "description": "Call this tool when necessary to create a chart. All string values must be properly escaped, especially for multi-line strings. When processing the output of the tool, URLs returned should always be in markdown format. For example, ![](url)",
        "workflowId": {
          "__rl": true,
          "value": "={{ $workflow.id }}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "chatInput": "={{ $('Settings').item.json.chatInput }}"
          },
          "matchingColumns": [
            "description"
          ],
          "schema": [
            {
              "id": "chatInput",
              "displayName": "chatInput",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        -1680,
        520
      ],
      "id": "3ca85a52-1e25-4fb6-b85e-a78752ba0b8e",
      "name": "Chart Greenhouse Data"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"properties\": {\n    \"options\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"responsive\": {\n          \"type\": \"boolean\"\n        },\n        \"maintainAspectRatio\": {\n          \"type\": \"boolean\"\n        },\n        \"scales\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"x\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"display\": {\n                  \"type\": \"boolean\"\n                },\n                \"title\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"display\": {\n                      \"type\": \"boolean\"\n                    },\n                    \"text\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            },\n            \"y\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"display\": {\n                  \"type\": \"boolean\"\n                },\n                \"title\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"display\": {\n                      \"type\": \"boolean\"\n                    },\n                    \"text\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"plugins\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"legend\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"display\": {\n                  \"type\": \"boolean\"\n                },\n                \"position\": {\n                  \"type\": \"string\",\n                  \"enum\": [\"top\", \"left\", \"bottom\", \"right\"]\n                }\n              }\n            },\n            \"tooltip\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"enabled\": {\n                  \"type\": \"boolean\"\n                }\n              }\n            }\n          }\n        },\n        \"animation\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"duration\": {\n              \"type\": \"number\"\n            },\n            \"easing\": {\n              \"type\": \"string\",\n              \"enum\": [\"linear\", \"easeInOutQuad\", \"easeInQuad\", \"easeOutQuad\", \"easeInOutCubic\", \"easeInCubic\", \"easeOutCubic\"]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1880,
        1420
      ],
      "id": "b22dceb1-c4be-4c52-8987-c07e0b1fd0bd",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -1380,
        -140
      ],
      "id": "e97647e6-eda8-45e4-a76a-d73248531241",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8346101e-afeb-4093-8727-517d69ea140c",
              "name": "response",
              "value": "={{ \"https://quickchart.io/chart?width=400&c=\" + encodeURIComponent(JSON.stringify($json.output)) }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1660,
        1200
      ],
      "id": "b4e25e53-000e-4cb5-b734-54d805ea9c65",
      "name": "Query QuickChart"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0a61ce99-17b5-45a9-b258-3f0291f11ba1",
              "name": "chatInput",
              "value": "={{ $json?.chatInput || $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "db780496-3d7a-4049-9c0d-9fb99a9a87df",
              "name": "sessionId",
              "value": "={{ $json?.sessionId || $json.body.sessionId }}",
              "type": "string"
            },
            {
              "id": "8df34e4d-3300-4d59-b4ed-15d3ae536408",
              "name": "table_id",
              "value": "myqybv0dxnx2qt8",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2660,
        180
      ],
      "id": "6feff0ac-6729-4fb8-8cf1-c14dcf6cdf79",
      "name": "Settings"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "workspaceId": "w33yjbmy",
        "projectId": "pa8jntwkscv3cqu",
        "table": "={{ $('Settings').item.json.table_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.nocoDbTool",
      "typeVersion": 3,
      "position": [
        -1820,
        520
      ],
      "id": "3c10eecb-589b-4da6-8721-45bf83e3a532",
      "name": "NocoDB",
      "credentials": {
        "nocoDbApiToken": {
          "id": "LIFbxKnIUOsYQ5bo",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0f09fcf1-60ff-467a-9b1f-0fd0ed2c28ab",
              "name": "columns",
              "value": "={{ $json.columns.map(item => item.title).toJsonString() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2200,
        180
      ],
      "id": "97e6b4f1-bcbb-43b1-a133-620009b789ab",
      "name": "Extract Columns"
    },
    {
      "parameters": {
        "url": "=https://app.nocodb.com/api/v2/meta/tables/{{ $json.table_id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "nocoDbApiToken",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2440,
        180
      ],
      "id": "e62056ec-a00a-42b3-a04f-7ab77b574854",
      "name": "Extract Table",
      "credentials": {
        "nocoDbApiToken": {
          "id": "LIFbxKnIUOsYQ5bo",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "{\n  \"chatInput\": \"a string\"\n}"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -2480,
        1200
      ],
      "id": "6ca498d7-a4b5-4589-8018-2c1e95ececb5",
      "name": "Execute 'Generate a chart' tool"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "Your task is to generate a Chart.js chart configuration for visualizing greenhouse data based on user requests. Use the following schema and guidelines to ensure the output is structured and immediately usable.\n\nHere’s how the output would look to ensure full schema alignment for the following example:\nCreate a line chart showing pressure trends in the Mediterranean Greenhouse over the last 12 hours.\n\nFor QuickChart, you can pass the chart configuration in the following format:\n{\n  \"type\": \"line\",\n  \"data\": {\n    \"labels\": [\"01:47\", \"02:47\", \"03:47\", \"04:47\", \"05:47\", \"06:47\", \"07:47\", \"08:47\", \"09:47\", \"10:47\", \"11:47\"],\n    \"datasets\": [{\n      \"label\": \"Humidity (%)\",\n      \"data\": [26.56, 26.24, 25.8, 25.61, 26.13, 26.28, 25.8, 26.68, 25.92, 25.64, 25.19],\n      \"fill\": false,\n      \"borderColor\": \"rgb(75, 192, 192)\",\n      \"tension\": 0.1\n    }]\n  },\n  \"options\": {\n    \"scales\": {\n      \"y\": {\n        \"beginAtZero\": false,\n        \"title\": {\n          \"display\": true,\n          \"text\": \"Humidity (%)\"\n        }\n      },\n      \"x\": {\n        \"title\": {\n          \"display\": true,\n          \"text\": \"Time\"\n        }\n      }\n    },\n    \"plugins\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Humidity in Tropical Greenhouse Over Time\"\n      }\n    }\n  }\n}\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -2120,
        1200
      ],
      "id": "6b0c06cc-f7bf-424d-b5bd-fea0bfaa12a8",
      "name": "Charting Agent",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {
          "systemMessage": "=You are a helpful Data Analyst assistant who is skilled at working with a database called nocodb.\n\nYour goal is to help the user understand the table that is specified.\n\nHere are the columns for that table.\n{{ $json.columns }}\n\nThe greenhouses you support are:\n\nTropical Greenhouse: Simulating the highland tropical climate of the Kibara Plateau, DRC. This environment supports species such as the critically endangered Drosera Katangensis, which experiences seasonal dormancy during colder, drier conditions.\n\nCoastal Greenhouse: Designed to simulate coastal Mediterranean conditions, this greenhouse focuses on plants adapted to more temperate environments, with fluctuating humidity and milder temperature ranges.\n\nClearly indicate any limitations in data availability or scope."
        }
      },
      "id": "d2324190-e846-4d5d-8627-f2ed08392f2f",
      "name": "RAG AI Farming Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -1840,
        180
      ],
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        -2120,
        1420
      ],
      "id": "2b973fe6-116c-41e4-a172-3eff13f77955",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "VNjQcg0XPXM42sfX",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        -2100,
        520
      ],
      "id": "b5b67d7c-7799-4972-ad72-ec78894c541e",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "cSiSxFBheiXBCfe1",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "This HTTP request updates the threshold values for a specific greenhouse (Coastal Greenhouse or Tropical Greenhouse) for a specific metric (either humidity or temperature). The request is triggered when a user wants to set or update the threshold values for a greenhouse. The request requires the greenhouse name, the metric (humidity or temperature), and the threshold values (low and/or high) to be specified.\nRequired Parameters:\nname (string): The name of the greenhouse (e.g., \"Tropical Greenhouse\" or \"Coastal Greenhouse\").\nmetric (string): The type of metric to update. Valid values are:\n\"humidity\": Refers to the humidity level in the greenhouse.\n\"temperature\": Refers to the temperature level in the greenhouse.\nlow (optional, integer): The lower threshold value. Should be defined if high is specified.\nhigh (optional, integer): The higher threshold value. Should be defined if low is specified.\nLogic:\nAt least one of low or high must be defined.\nIf both low and high are provided, low must be strictly less than high.\nResponse Handling:\nIf the response contains a \"message\" with \"Thresholds updated successfully\", the agent should notify the user that the update was successful and provide the discord link.\n\nIf the response contains an \"error\", the agent should relay the error message to the user, explaining what went wrong (e.g., invalid greenhouse name, missing parameters, or invalid threshold values).\nExample success response:\n{\n  \"message\": \"Thresholds updated successfully\",\n  \"data\": {\n    \"name\": \"Tropical Greenhouse\",\n    \"metric\": \"humidity\",\n    \"low\": 20,\n    \"high\": 30,\n    \"discord\": \"https://discord.gg/wVcxdFPf28\"\n  }\n}\n\n\nThe agent should respond to the user: \"The thresholds for Tropical Greenhouse have been updated successfully. Metric: humidity, Low: 20%, High: 30%.\" To check out the event updates, visit the discord integration here: https://discord.gg/wVcxdFPf28\nExample error response:\n{\n  \"error\": \"At least one of 'low' or 'high' must be defined\"\n}\n\n\nThe agent should respond to the user: \"Error: At least one of 'low' or 'high' must be defined.\"\n",
        "method": "POST",
        "url": "https://canopyserver.alurellc.com/discord/update_threshold",
        "sendBody": true,
        "parametersBody": {
          "values": [
            {
              "name": "name"
            },
            {
              "name": "low",
              "valueProvider": "modelOptional"
            },
            {
              "name": "high",
              "valueProvider": "modelOptional"
            },
            {
              "name": "metric"
            }
          ]
        },
        "optimizeResponse": true
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        -1520,
        520
      ],
      "id": "0340acb7-ce99-4cd5-9dd4-84a24b16c47e",
      "name": "Set Alerts"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFile",
        "fileToWatch": {
          "__rl": true,
          "value": "188bjeoQsruiv54pRbcU-TZ6jGdcYB_9TgWJNWyaV3gc",
          "mode": "list",
          "cachedResultName": "Greenhouse Documentation",
          "cachedResultUrl": "https://docs.google.com/document/d/188bjeoQsruiv54pRbcU-TZ6jGdcYB_9TgWJNWyaV3gc/edit?usp=drivesdk"
        }
      },
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -2480,
        940
      ],
      "id": "84f1cc13-b0c7-49e3-bbe4-556b7e8647c8",
      "name": "Google Drive Trigger",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "3FM4KfvfA9tvex2L",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Gets the most recent image of a top view snapshot from the coastal greenhouse. Trigger this tool whenever the user asks about the current image or view in the coastal greenhouse. If they ask about the tropical greenhouse view, kindly explain that there isn't a mini-camera hooked up in that greenhouse yet.\n\nThe tool makes a GET request to https://canopyserver.alurellc.com/get_image and returns an image_url and timestamp in the response, similar to:\n\n{\n    \"image_url\": \"/images/camera_image_latest.jpg\",\n    \"timestamp\": \"20250128_065508\"\n}\nAfter receiving the response:\n\nDecode the timestamp and return it in a user-friendly format (e.g., \"January 28, 2025, 06:55:08 AM CST\"). The timestamps are in CST, so be sure to specify that. \n\nFormat the image_url as a full URL (https://canopyserver.alurellc.com{image_url}).\nReturn the image URL in markdown format like ![](https://canopyserver.alurellc.com/images/camera_image_latest.jpg) to allow users to view the image.\n\nIf there's an error or the timestamp can't be decoded, respond with a user-friendly explanation.\n\nExample Output in Markdown: \nAfter making the call, the tool would return something like this to the user:\n\nTimestamp: January 28, 2025, 06:55:08 AM (specify CST)\nImage: ![](https://canopyserver.alurellc.com/images/camera_image_latest.jpg)\nThis approach ensures the image can be presented cleanly in markdown format while decoding the timestamp for user clarity.",
        "url": "https://canopyserver.alurellc.com/get_image",
        "optimizeResponse": true
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        -1360,
        520
      ],
      "id": "69b87ccc-e304-4bf2-bc8c-5bbccf566c31",
      "name": "Get Greenhouse Image"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.[your n8n url].com",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
            "content-length": "192",
            "accept": "*/*",
            "accept-encoding": "deflate, gzip",
            "authorization": "Bearer YOUR BEARER TOKEN",
            "content-type": "application/json",
            "x-forwarded-for": "64.227.21.251",
            "x-forwarded-host": "n8n.[your n8n url].com",
            "x-forwarded-proto": "https",
            "x-real-ip": "2601:441:4380:40b0:b4b3:724b:27e1:c4ba"
          },
          "params": {},
          "query": {},
          "body": {
            "query": "Supabase",
            "user_id": "google-oauth2|116467443974012389959",
            "request_id": "f98asdyf987yasd0f987asdf8",
            "session_id": "google-oauth2|116467443974012389959~2~8dfbddbe603d"
          },
          "webhookUrl": "https://n8n.[your n8n url].com/webhook-test/invoke-agent",
          "executionMode": "test"
        }
      }
    ]
  },
  "connections": {
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Retrieve Documents",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Retrieve Documents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Farming Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG AI Farming Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Doc Rows": {
      "main": [
        [
          {
            "node": "Download Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Settings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Prep Input Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_vectorStore": [
        [
          {
            "node": "Retrieve Documents",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Text": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prep Input Fields": {
      "main": [
        [
          {
            "node": "Add User Message to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add User Message to DB": {
      "main": [
        []
      ]
    },
    "Add AI Message to DB": {
      "main": [
        [
          {
            "node": "Prep Output Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prep Output Fields": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Doc ID": {
      "main": [
        [
          {
            "node": "Delete Old Doc Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chart Greenhouse Data": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Farming Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Charting Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Settings": {
      "main": [
        [
          {
            "node": "Extract Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Farming Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Extract Columns": {
      "main": [
        [
          {
            "node": "RAG AI Farming Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Table": {
      "main": [
        [
          {
            "node": "Extract Columns",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute 'Generate a chart' tool": {
      "main": [
        [
          {
            "node": "Charting Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Charting Agent": {
      "main": [
        [
          {
            "node": "Query QuickChart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG AI Farming Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Charting Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "RAG AI Farming Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Set Alerts": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Farming Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive Trigger": {
      "main": [
        [
          {
            "node": "Set Doc ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Greenhouse Image": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Farming Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c35224bc-a52b-4d13-aeee-28f20f145034",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2761e4be56c53f6a757b549b0e8a4e4485fee9ce29754b33bf246ac6eefacc94"
  },
  "id": "RnkC4GPAGDISMCTs",
  "tags": []
}